package HBML.constraints;

/*Generated by MPS */

import jetbrains.mps.core.aspects.constraints.rules.BaseRulesConstraintsDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.constraints.rules.Rule;
import jetbrains.mps.core.aspects.constraints.rules.kinds.ContainmentContext;
import java.util.List;
import java.util.Collections;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.core.aspects.constraints.rules.BaseRule;
import org.jetbrains.mps.openapi.model.SNodeReference;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.core.aspects.constraints.rules.RuleId;
import jetbrains.mps.core.aspects.constraints.rules.kinds.PredefinedRuleKinds;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SProperty;

public final class Actuator_ConstraintRules extends BaseRulesConstraintsDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0xb0b8832625824427L, 0x889661f7684b0da0L, 0xb6c10cfea61a47L, "HBML.structure.Actuator");

  public static final Rule<ContainmentContext> check_id1384667636723900756 = new Rule_notEmptyDevice();

  private static final List<Rule<?>> RULES = Collections.unmodifiableList(Arrays.<Rule<?>>asList(check_id1384667636723900756));

  @NotNull
  @Override
  public List<Rule<?>> getDeclaredRules() {
    return RULES;
  }

  public static final class Rule_notEmptyDevice extends BaseRule<ContainmentContext> {
    private static final SNodeReference SOURCE_NODE_REF = PersistenceFacade.getInstance().createNodeReference("r:9834744c-9584-43dc-a442-45d197c7349c(HBML.constraints)/1384667636723900756");
    public static final RuleId ID_notEmptyDevice = new RuleId(1384667636723900756L, SOURCE_NODE_REF);

    public Rule_notEmptyDevice() {
      super(CONCEPT, PredefinedRuleKinds.CAN_BE_CHILD, ID_notEmptyDevice, SOURCE_NODE_REF);
    }

    @Override
    public boolean check(@NotNull ContainmentContext context) {
      return isEmptyString(SPropertyOperations.getString(SLinkOperations.getTarget(context.getChildNode(), LINKS.device$drrM), PROPS.name$MnvL)) == false;
    }

    @Override
    public boolean appliesTo(@NotNull ContainmentContext context) {
      return true;
    }
    private static boolean isEmptyString(String str) {
      return str == null || str.isEmpty();
    }
  }

  /*package*/ Actuator_ConstraintRules() {
    super(CONCEPT);
  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink device$drrM = MetaAdapterFactory.getReferenceLink(0xb0b8832625824427L, 0x889661f7684b0da0L, 0xb6c10cfea61a47L, 0xb6c10cfea61b97L, "device");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }
}
