package HBML.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Door;
  private ConceptPresentation props_Floor;
  private ConceptPresentation props_House;
  private ConceptPresentation props_OuterSpace;
  private ConceptPresentation props_Passage;
  private ConceptPresentation props_Room;
  private ConceptPresentation props_Space;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Door:
        if (props_Door == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("A passage with a door");
          cpb.presentationByName();
          props_Door = cpb.create();
        }
        return props_Door;
      case LanguageConceptSwitch.Floor:
        if (props_Floor == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("The floor of a house");
          cpb.presentationByName();
          props_Floor = cpb.create();
        }
        return props_Floor;
      case LanguageConceptSwitch.House:
        if (props_House == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Root object of an HouseBuilder model");
          cpb.presentationByName();
          props_House = cpb.create();
        }
        return props_House;
      case LanguageConceptSwitch.OuterSpace:
        if (props_OuterSpace == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_OuterSpace = cpb.create();
        }
        return props_OuterSpace;
      case LanguageConceptSwitch.Passage:
        if (props_Passage == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Create a passage between two spaces");
          cpb.presentationByName();
          props_Passage = cpb.create();
        }
        return props_Passage;
      case LanguageConceptSwitch.Room:
        if (props_Room == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("An indoor space type");
          cpb.presentationByName();
          props_Room = cpb.create();
        }
        return props_Room;
      case LanguageConceptSwitch.Space:
        if (props_Space == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("A space represents a structure with a size");
          props_Space = cpb.create();
        }
        return props_Space;
    }
    return null;
  }
}
